/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  AuctionMock,
  AuctionMockInterface,
} from "../../../../contracts/registrar/mock/AuctionMock";

const _abi = [
  {
    inputs: [],
    name: "AuctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionNotExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "BidExists",
    type: "error",
  },
  {
    inputs: [],
    name: "BidTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "CommitmentDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    name: "__Auction_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionDeadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionHighestBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionHighestBidder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
    ],
    name: "commit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuctionDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "hasAuctionExpired",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
    ],
    name: "hasCommitment",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "secret",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "makeCommitment",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "secret",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "reveal",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "refund",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "highestCommitment",
            type: "bytes32",
          },
        ],
        internalType: "struct Auction.Result",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611ce4806100206000396000f3fe6080604052600436106100a75760003560e01c8063acc532fd11610064578063acc532fd14610208578063d1ac75b014610245578063e3ce094d1461026e578063ee060ded1461028a578063fb456c5e146102c7578063fe4b84df14610304576100a7565b8063369e67d6146100ac57806342c80f05146100e957806348eda45d1461012657806369dcfe8b1461016357806378cb51af146101a05780637a5a69e3146101cb575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce919061186d565b61032d565b6040516100e091906118e3565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b91906118fe565b6103a2565b60405161011d9190611946565b60405180910390f35b34801561013257600080fd5b5061014d600480360381019061014891906118fe565b610400565b60405161015a9190611946565b60405180910390f35b34801561016f57600080fd5b5061018a600480360381019061018591906118fe565b610499565b6040516101979190611970565b60405180910390f35b3480156101ac57600080fd5b506101b56106ad565b6040516101c2919061199a565b60405180910390f35b3480156101d757600080fd5b506101f260048036038101906101ed91906118fe565b6106f3565b6040516101ff9190611946565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a91906118fe565b61079f565b60405161023c919061199a565b60405180910390f35b34801561025157600080fd5b5061026c600480360381019061026791906119b5565b610993565b005b610288600480360381019061028391906119e2565b610a0b565b005b34801561029657600080fd5b506102b160048036038101906102ac9190611a22565b610a56565b6040516102be9190611ae4565b60405180910390f35b3480156102d357600080fd5b506102ee60048036038101906102e991906118fe565b610aae565b6040516102fb919061199a565b60405180910390f35b34801561031057600080fd5b5061032b600480360381019061032691906119b5565b610b0a565b005b600061034367768185894e46d44160c01b610cfd565b610357677990d6ce7208166760c01b610cfd565b61036b674cfd07d4bdc98a5360c01b610cfd565b848484846040516020016103829493929190611b89565b604051602081830303815290604052805190602001209050949350505050565b60006103b8675dc4901f926f73d760c01b610cfd565b6103cc6779b2c44952c8a9bf60c01b610cfd565b6103e067361a31bc48d36cd660c01b610cfd565b426002600084815260200190815260200160002060020154109050919050565b600061041667a4c1b7d03a2cbaaa60c01b610cfd565b61042a67e0c61af61fd1460660c01b610cfd565b61043e67e9cc2a7b0cadd6fb60c01b610cfd565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205414159050919050565b60006104af67ad77147f2e54f37a60c01b610cfd565b816104c467d5305204d2a6f9cf60c01b610cfd565b6104d867f9326361c6d3c0a960c01b610cfd565b6104ec67e886a3ab1c8058aa60c01b610cfd565b6104f5816106f3565b6105535761050d6787ef80a673b3e25160c01b610cfd565b61052167c19f8c9e7d19b25860c01b610cfd565b6040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610567677df873c66b5b729360c01b610cfd565b61057b67fbb2580bc208bc6160c01b610cfd565b61058f67ef94c0c554214ec460c01b610cfd565b610598816103a2565b6105f6576105b067aa08abe4f6b74de160c01b610cfd565b6105c4670f0e98f68a45201560c01b610cfd565b6040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61060a67151a369d6337885e60c01b610cfd565b61061e67481a372b1f446afd60c01b610cfd565b61063267b0103198e23d48b260c01b610cfd565b610646675dd1b0e6a85d03d460c01b610cfd565b61065a67b7bd047be06a9e5c60c01b610cfd565b61066e6748ff463c8e6be49c60c01b610cfd565b6002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60006106c367da02fe005a3dc44460c01b610cfd565b6106d76725fa84122ab618c760c01b610cfd565b6106eb67ccf254689b8b9f2160c01b610cfd565b600154905090565b600061070967984f03cdf50fe06e60c01b610cfd565b61071d675ce8ab4b72748c3260c01b610cfd565b61073167d91309bf6ff5856a60c01b610cfd565b600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60006107b567bd332038793dc8f560c01b610cfd565b816107ca67d5305204d2a6f9cf60c01b610cfd565b6107de67f9326361c6d3c0a960c01b610cfd565b6107f267e886a3ab1c8058aa60c01b610cfd565b6107fb816106f3565b610859576108136787ef80a673b3e25160c01b610cfd565b61082767c19f8c9e7d19b25860c01b610cfd565b6040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61086d677df873c66b5b729360c01b610cfd565b61088167fbb2580bc208bc6160c01b610cfd565b61089567ef94c0c554214ec460c01b610cfd565b61089e816103a2565b6108fc576108b667aa08abe4f6b74de160c01b610cfd565b6108ca670f0e98f68a45201560c01b610cfd565b6040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61091067151a369d6337885e60c01b610cfd565b61092467481a372b1f446afd60c01b610cfd565b61093867855cf925dd59760060c01b610cfd565b61094c67a0d80fa9fd49144960c01b610cfd565b610960675598aeabbbcb7ae460c01b610cfd565b61097467494d203d7cbcb8a560c01b610cfd565b6002600084815260200190815260200160002060010154915050919050565b6109a767cde0e6d831e51b6160c01b610cfd565b6109af610d00565b6109c3671b5e3deb786c145860c01b610cfd565b6109d76724c92036a314e10860c01b610cfd565b6109eb6794b94ec1d364e36b60c01b610cfd565b6109ff6762e6ee8f55cc0fbd60c01b610cfd565b610a0881610d40565b50565b610a1f6778de37772cadc01b60c01b610d72565b610a3367fe1bc40bb1eac3aa60c01b610d72565b610a476761b8ba4ec504522d60c01b610d72565b610a52828234610d75565b5050565b610a5e611778565b610a72677c4d0847fbd590b060c01b610d72565b610a8667cde80e8e1e08fc5760c01b610d72565b610a9a67187e9731bb193f4f60c01b610d72565b610aa58484846111ab565b90509392505050565b6000610ac4673f7055695ce3ef8560c01b610cfd565b610ad8677b88126cb1fdc1bb60c01b610cfd565b610aec679394bda985ac8fae60c01b610cfd565b60026000838152602001908152602001600020600201549050919050565b610b1e670f00f47956e55df060c01b610d72565b6000610b28611643565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610b765750825b9050600060018367ffffffffffffffff16148015610bab575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610bb9575080155b15610bf0576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610c405760018560000160086101000a81548160ff0219169083151502179055505b610c54677ec541040511d4ad60c01b610d72565b610c686736f99815a4fec01e60c01b610d72565b610c7c674fd34a54812d942f60c01b610d72565b610c9067f479ffa0a9ee7d9260c01b610d72565b610c9986610993565b8315610cf55760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610cec9190611c30565b60405180910390a15b505050505050565b50565b610d0861166b565b610d3e576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b610d5467d6ef33e6817f9aad60c01b610cfd565b610d6867a3d726359b19881b60c01b610cfd565b8060018190555050565b50565b610d89673a0c4a87fecf963560c01b610cfd565b610d9d672bd3254976dae93260c01b610cfd565b610db167502a1be2113b979860c01b610cfd565b610dba82610400565b15610e1957610dd367abba8d76b9c900a560c01b610cfd565b610de767f27214e4a690dc3760c01b610cfd565b6040517f3e0827ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e2d674c643f751f2ab73f60c01b610cfd565b610e4167b2a3ab68f0b181ad60c01b610cfd565b610e556706986bfe9a22980160c01b610cfd565b610e5e836106f3565b610eac57610e76671698a272f036882a60c01b610cfd565b610e8a67c10cc7502f6ff78960c01b610cfd565b610e9e67140cd04f84fa9ee260c01b610cfd565b610ea78361168b565b610ec1565b610ec067fe18242c64945aaa60c01b610cfd565b5b610ed5673c9c11fc393f04d060c01b610cfd565b610ee9674026e1daa65135b260c01b610cfd565b610ef2836103a2565b15610f5157610f0b67ac224039435d53fc60c01b610cfd565b610f1f67167ae430415d1b9c60c01b610cfd565b6040517f04a5e67c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f6567534a264b587c364a60c01b610cfd565b610f7967958e8a717acac99a60c01b610cfd565b610f8d67bb566f90f7e0a50260c01b610cfd565b60008111610fef57610fa967cc801ca06947219860c01b610cfd565b610fbd67e61db34e172e76de60c01b610cfd565b6040517fa0d26eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61100367ad0adb5e279f200060c01b610cfd565b6110176707ef384b7c22c6b060c01b610cfd565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208190555061107f67d2bc92c8b37d4da860c01b610cfd565b61109367eda1e4b4f87c4fba60c01b610cfd565b6002600084815260200190815260200160002060010154811115611191576110c56727d7a5009a5b578060c01b610cfd565b6110d967217bfbece521340a60c01b610cfd565b336002600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611142670e19f748a78ec90b60c01b610cfd565b806002600085815260200190815260200160002060010181905550611171671a47dcfeeb3e0fcd60c01b610cfd565b8160026000858152602001908152602001600020600301819055506111a6565b6111a5677cc72df97ee8c02760c01b610cfd565b5b505050565b6111b3611778565b6111c7672028666160a8e15660c01b610cfd565b6111db67ce31f210b2b073c460c01b610cfd565b6111ef677b53ee604583044960c01b610cfd565b60006111fd3386868661032d565b90506112136777b15dd3eda0981560c01b610cfd565b61122767c1e8ef3d4f5bbb5960c01b610cfd565b611230856106f3565b61128e5761124867f69773df0202c39d60c01b610cfd565b61125c675eb2567c35147bc860c01b610cfd565b6040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112a267350d71ce63fe72b160c01b610cfd565b6112b66715ff0248a17d606060c01b610cfd565b6112ca67888d747a983a14fb60c01b610cfd565b6112d3856103a2565b611331576112eb678879f3b20fffeb6560c01b610cfd565b6112ff679930a00304a2017260c01b610cfd565b6040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61134567ed0bde6a519c817060c01b610cfd565b61135967e1e1978c699efb0860c01b610cfd565b61136d67a7f360f11c28552f60c01b610cfd565b61137681610400565b6113d45761138e676a6295a6751e02d560c01b610cfd565b6113a2679d560aa44d748bab60c01b610cfd565b6040517f99d1f42800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113e86770286c23e28b90fb60c01b610cfd565b6113fc677ae1344eeaff529e60c01b610cfd565b6114106784b7ba4f678ad19260c01b610cfd565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905061147867c928643844970b6a60c01b610cfd565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600090556114df67db9df4668f28dbb060c01b610cfd565b6114f367566685b5af11bac360c01b610cfd565b816002600088815260200190815260200160002060030154146115985761152467daba56d51aea9ae060c01b610cfd565b61153867ad5096049c9f358e60c01b610cfd565b61154c6757f4c8a4f11090d260c01b610cfd565b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611592573d6000803e3d6000fd5b506115c5565b6115ac67533f21d86725dd5c60c01b610cfd565b6115c06740d0f383e83f965f60c01b610cfd565b600090505b6115d967aa4f17d70aba54aa60c01b610cfd565b6115ed6756352dde4e76f69960c01b610cfd565b604051806060016040528083600260008a81526020019081526020016000206003015414151581526020018281526020016002600089815260200190815260200160002060030154815250925050509392505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6000611675611643565b60000160089054906101000a900460ff16905090565b61169f67c898fa74e0f77d2660c01b610cfd565b6116b367d26b723f8f72b8c360c01b610cfd565b600060026000838152602001908152602001600020600101819055506116e367b0d608ecf67f895c60c01b610cfd565b60006002600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061174d67faf898b5fb9f233460c01b610cfd565b6001544261175b9190611c7a565b600260008381526020019081526020016000206002018190555050565b604051806060016040528060001515815260200160008152602001600080191681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117ce826117a3565b9050919050565b6117de816117c3565b81146117e957600080fd5b50565b6000813590506117fb816117d5565b92915050565b6000819050919050565b61181481611801565b811461181f57600080fd5b50565b6000813590506118318161180b565b92915050565b6000819050919050565b61184a81611837565b811461185557600080fd5b50565b60008135905061186781611841565b92915050565b600080600080608085870312156118875761188661179e565b5b6000611895878288016117ec565b94505060206118a687828801611822565b93505060406118b787828801611822565b92505060606118c887828801611858565b91505092959194509250565b6118dd81611801565b82525050565b60006020820190506118f860008301846118d4565b92915050565b6000602082840312156119145761191361179e565b5b600061192284828501611822565b91505092915050565b60008115159050919050565b6119408161192b565b82525050565b600060208201905061195b6000830184611937565b92915050565b61196a816117c3565b82525050565b60006020820190506119856000830184611961565b92915050565b61199481611837565b82525050565b60006020820190506119af600083018461198b565b92915050565b6000602082840312156119cb576119ca61179e565b5b60006119d984828501611858565b91505092915050565b600080604083850312156119f9576119f861179e565b5b6000611a0785828601611822565b9250506020611a1885828601611822565b9150509250929050565b600080600060608486031215611a3b57611a3a61179e565b5b6000611a4986828701611822565b9350506020611a5a86828701611822565b9250506040611a6b86828701611858565b9150509250925092565b611a7e8161192b565b82525050565b611a8d81611837565b82525050565b611a9c81611801565b82525050565b606082016000820151611ab86000850182611a75565b506020820151611acb6020850182611a84565b506040820151611ade6040850182611a93565b50505050565b6000606082019050611af96000830184611aa2565b92915050565b60008160601b9050919050565b6000611b1782611aff565b9050919050565b6000611b2982611b0c565b9050919050565b611b41611b3c826117c3565b611b1e565b82525050565b6000819050919050565b611b62611b5d82611801565b611b47565b82525050565b6000819050919050565b611b83611b7e82611837565b611b68565b82525050565b6000611b958287611b30565b601482019150611ba58286611b51565b602082019150611bb58285611b51565b602082019150611bc58284611b72565b60208201915081905095945050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b6000611c1a611c15611c1084611bd7565b611bf5565b611be1565b9050919050565b611c2a81611bff565b82525050565b6000602082019050611c456000830184611c21565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c8582611837565b9150611c9083611837565b9250828201905080821115611ca857611ca7611c4b565b5b9291505056fea2646970667358221220b3aa5dc2a97464b12893336a6e22aee640ead3969b37d28acf7339d041a5e12a64736f6c63430008140033";

type AuctionMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuctionMock__factory extends ContractFactory {
  constructor(...args: AuctionMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AuctionMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AuctionMock__factory {
    return super.connect(runner) as AuctionMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionMockInterface {
    return new Interface(_abi) as AuctionMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AuctionMock {
    return new Contract(address, _abi, runner) as unknown as AuctionMock;
  }
}
