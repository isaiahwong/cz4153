/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  AuctionMock,
  AuctionMockInterface,
} from "../../../../contracts/registrar/mock/AuctionMock";

const _abi = [
  {
    inputs: [],
    name: "AuctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionNotExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "BidExists",
    type: "error",
  },
  {
    inputs: [],
    name: "BidTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "CommitmentDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    name: "__Auction_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionDeadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionHighestBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionHighestBidder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
    ],
    name: "commit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuctionDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "hasAuctionExpired",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
    ],
    name: "hasCommitment",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "secret",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "makeCommitment",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "secret",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "reveal",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "refund",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "highestCommitment",
            type: "bytes32",
          },
        ],
        internalType: "struct Auction.Result",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061125a806100206000396000f3fe6080604052600436106100a75760003560e01c8063acc532fd11610064578063acc532fd14610208578063d1ac75b014610245578063e3ce094d1461026e578063ee060ded1461028a578063fb456c5e146102c7578063fe4b84df14610304576100a7565b8063369e67d6146100ac57806342c80f05146100e957806348eda45d1461012657806369dcfe8b1461016357806378cb51af146101a05780637a5a69e3146101cb575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610de3565b61032d565b6040516100e09190610e59565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b9190610e74565b610366565b60405161011d9190610ebc565b60405180910390f35b34801561013257600080fd5b5061014d60048036038101906101489190610e74565b610388565b60405161015a9190610ebc565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610e74565b6103e4565b6040516101979190610ee6565b60405180910390f35b3480156101ac57600080fd5b506101b56104a4565b6040516101c29190610f10565b60405180910390f35b3480156101d757600080fd5b506101f260048036038101906101ed9190610e74565b6104ae565b6040516101ff9190610ebc565b60405180910390f35b34801561021457600080fd5b5061022f600480360381019061022a9190610e74565b61051d565b60405161023c9190610f10565b60405180910390f35b34801561025157600080fd5b5061026c60048036038101906102679190610f2b565b6105bd565b005b61028860048036038101906102839190610f58565b6105d1565b005b34801561029657600080fd5b506102b160048036038101906102ac9190610f98565b6105e0565b6040516102be919061105a565b60405180910390f35b3480156102d357600080fd5b506102ee60048036038101906102e99190610e74565b6105fc565b6040516102fb9190610f10565b60405180910390f35b34801561031057600080fd5b5061032b60048036038101906103269190610f2b565b61061c565b005b60008484848460405160200161034694939291906110ff565b604051602081830303815290604052805190602001209050949350505050565b6000426002600084815260200190815260200160002060020154109050919050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205414159050919050565b6000816103f0816104ae565b610426576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61042f81610366565b610465576040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600081610529816104ae565b61055f576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61056881610366565b61059e576040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600084815260200190815260200160002060010154915050919050565b6105c56107ab565b6105ce816107eb565b50565b6105dc8282346107f5565b5050565b6105e8610cee565b6105f38484846109c9565b90509392505050565b600060026000838152602001908152602001600020600201549050919050565b6000610626610c09565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156106745750825b9050600060018367ffffffffffffffff161480156106a9575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156106b7575080155b156106ee576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561073e5760018560000160086101000a81548160ff0219169083151502179055505b610747866105bd565b83156107a35760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161079a91906111a6565b60405180910390a15b505050505050565b6107b3610c31565b6107e9576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b8060018190555050565b6107fe82610388565b15610835576040517f3e0827ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61083e836104ae565b61084c5761084b83610c51565b5b61085583610366565b1561088c576040517f04a5e67c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081116108c6576040517fa0d26eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208190555060026000848152602001908152602001600020600101548111156109c457336002600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060026000858152602001908152602001600020600101819055508160026000858152602001908152602001600020600301819055505b505050565b6109d1610cee565b60006109df3386868661032d565b90506109ea856104ae565b610a20576040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a2985610366565b610a5f576040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a6881610388565b610a9e576040517f99d1f42800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205490506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905581600260008881526020019081526020016000206003015414610bae573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ba8573d6000803e3d6000fd5b50610bb3565b600090505b604051806060016040528083600260008a81526020019081526020016000206003015414151581526020018281526020016002600089815260200190815260200160002060030154815250925050509392505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6000610c3b610c09565b60000160089054906101000a900460ff16905090565b6000600260008381526020019081526020016000206001018190555060006002600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060015442610cd191906111f0565b600260008381526020019081526020016000206002018190555050565b604051806060016040528060001515815260200160008152602001600080191681525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d4482610d19565b9050919050565b610d5481610d39565b8114610d5f57600080fd5b50565b600081359050610d7181610d4b565b92915050565b6000819050919050565b610d8a81610d77565b8114610d9557600080fd5b50565b600081359050610da781610d81565b92915050565b6000819050919050565b610dc081610dad565b8114610dcb57600080fd5b50565b600081359050610ddd81610db7565b92915050565b60008060008060808587031215610dfd57610dfc610d14565b5b6000610e0b87828801610d62565b9450506020610e1c87828801610d98565b9350506040610e2d87828801610d98565b9250506060610e3e87828801610dce565b91505092959194509250565b610e5381610d77565b82525050565b6000602082019050610e6e6000830184610e4a565b92915050565b600060208284031215610e8a57610e89610d14565b5b6000610e9884828501610d98565b91505092915050565b60008115159050919050565b610eb681610ea1565b82525050565b6000602082019050610ed16000830184610ead565b92915050565b610ee081610d39565b82525050565b6000602082019050610efb6000830184610ed7565b92915050565b610f0a81610dad565b82525050565b6000602082019050610f256000830184610f01565b92915050565b600060208284031215610f4157610f40610d14565b5b6000610f4f84828501610dce565b91505092915050565b60008060408385031215610f6f57610f6e610d14565b5b6000610f7d85828601610d98565b9250506020610f8e85828601610d98565b9150509250929050565b600080600060608486031215610fb157610fb0610d14565b5b6000610fbf86828701610d98565b9350506020610fd086828701610d98565b9250506040610fe186828701610dce565b9150509250925092565b610ff481610ea1565b82525050565b61100381610dad565b82525050565b61101281610d77565b82525050565b60608201600082015161102e6000850182610feb565b5060208201516110416020850182610ffa565b5060408201516110546040850182611009565b50505050565b600060608201905061106f6000830184611018565b92915050565b60008160601b9050919050565b600061108d82611075565b9050919050565b600061109f82611082565b9050919050565b6110b76110b282610d39565b611094565b82525050565b6000819050919050565b6110d86110d382610d77565b6110bd565b82525050565b6000819050919050565b6110f96110f482610dad565b6110de565b82525050565b600061110b82876110a6565b60148201915061111b82866110c7565b60208201915061112b82856110c7565b60208201915061113b82846110e8565b60208201915081905095945050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600061119061118b6111868461114d565b61116b565b611157565b9050919050565b6111a081611175565b82525050565b60006020820190506111bb6000830184611197565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111fb82610dad565b915061120683610dad565b925082820190508082111561121e5761121d6111c1565b5b9291505056fea2646970667358221220104d854eb09ed1e0eed1530d204c052219812cae0f57f1f3b23739e04da32c2664736f6c63430008140033";

type AuctionMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuctionMock__factory extends ContractFactory {
  constructor(...args: AuctionMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AuctionMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AuctionMock__factory {
    return super.connect(runner) as AuctionMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionMockInterface {
    return new Interface(_abi) as AuctionMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AuctionMock {
    return new Contract(address, _abi, runner) as unknown as AuctionMock;
  }
}
