/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DNSRegistry,
  DNSRegistryInterface,
} from "../../../contracts/registry/DNSRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "domainPlainText",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NewDomainOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "available",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "domains",
        type: "bytes32[]",
      },
    ],
    name: "bulkResolve",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "cnames",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "makeSubdomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setSubDomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000808060001b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c62806100776000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630ed97309146100675780633b3b57de146100975780636932854f146100c7578063917906b5146100f7578063c91381e514610127578063f9e5423414610157575b600080fd5b610081600480360381019061007c91906104f7565b610187565b60405161008e9190610546565b60405180910390f35b6100b160048036038101906100ac9190610561565b6101ba565b6040516100be91906105cf565b60405180910390f35b6100e160048036038101906100dc9190610561565b6101f9565b6040516100ee9190610605565b60405180910390f35b610111600480360381019061010c919061064c565b610266565b60405161011e9190610546565b60405180910390f35b610141600480360381019061013c91906107bf565b61027e565b60405161014e9190610546565b60405180910390f35b610171600480360381019061016c91906108f6565b6103c4565b60405161017e91906109fd565b60405180910390f35b6000828260405160200161019c929190610a40565b60405160208183030381529060405280519060200120905092915050565b600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b60016020528060005260406000206000915090505481565b6000833373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102ee57600080fd5b6000846040516020016103019190610add565b60405160208183030381529060405280519060200120905060006103258783610187565b90508460008083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550867ffe3504a1644f9523da19bb06fcbeffd519608ccc63bf4898bb1d6a1c8f04b4b68388886040516103af93929190610b3e565b60405180910390a28093505050509392505050565b60606000825167ffffffffffffffff8111156103e3576103e2610694565b5b6040519080825280602002602001820160405280156104115781602001602082028036833780820191505090505b50905060005b83518110156104a35761044384828151811061043657610435610b7c565b5b60200260200101516101ba565b82828151811061045657610455610b7c565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061049b90610be4565b915050610417565b5080915050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104d4816104c1565b81146104df57600080fd5b50565b6000813590506104f1816104cb565b92915050565b6000806040838503121561050e5761050d6104b7565b5b600061051c858286016104e2565b925050602061052d858286016104e2565b9150509250929050565b610540816104c1565b82525050565b600060208201905061055b6000830184610537565b92915050565b600060208284031215610577576105766104b7565b5b6000610585848285016104e2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b98261058e565b9050919050565b6105c9816105ae565b82525050565b60006020820190506105e460008301846105c0565b92915050565b60008115159050919050565b6105ff816105ea565b82525050565b600060208201905061061a60008301846105f6565b92915050565b610629816105ae565b811461063457600080fd5b50565b60008135905061064681610620565b92915050565b600060208284031215610662576106616104b7565b5b600061067084828501610637565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106cc82610683565b810181811067ffffffffffffffff821117156106eb576106ea610694565b5b80604052505050565b60006106fe6104ad565b905061070a82826106c3565b919050565b600067ffffffffffffffff82111561072a57610729610694565b5b61073382610683565b9050602081019050919050565b82818337600083830152505050565b600061076261075d8461070f565b6106f4565b90508281526020810184848401111561077e5761077d61067e565b5b610789848285610740565b509392505050565b600082601f8301126107a6576107a5610679565b5b81356107b684826020860161074f565b91505092915050565b6000806000606084860312156107d8576107d76104b7565b5b60006107e6868287016104e2565b935050602084013567ffffffffffffffff811115610807576108066104bc565b5b61081386828701610791565b925050604061082486828701610637565b9150509250925092565b600067ffffffffffffffff82111561084957610848610694565b5b602082029050602081019050919050565b600080fd5b600061087261086d8461082e565b6106f4565b905080838252602082019050602084028301858111156108955761089461085a565b5b835b818110156108be57806108aa88826104e2565b845260208401935050602081019050610897565b5050509392505050565b600082601f8301126108dd576108dc610679565b5b81356108ed84826020860161085f565b91505092915050565b60006020828403121561090c5761090b6104b7565b5b600082013567ffffffffffffffff81111561092a576109296104bc565b5b610936848285016108c8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610974816105ae565b82525050565b6000610986838361096b565b60208301905092915050565b6000602082019050919050565b60006109aa8261093f565b6109b4818561094a565b93506109bf8361095b565b8060005b838110156109f05781516109d7888261097a565b97506109e283610992565b9250506001810190506109c3565b5085935050505092915050565b60006020820190508181036000830152610a17818461099f565b905092915050565b6000819050919050565b610a3a610a35826104c1565b610a1f565b82525050565b6000610a4c8285610a29565b602082019150610a5c8284610a29565b6020820191508190509392505050565b600081519050919050565b600081905092915050565b60005b83811015610aa0578082015181840152602081019050610a85565b60008484015250505050565b6000610ab782610a6c565b610ac18185610a77565b9350610ad1818560208601610a82565b80840191505092915050565b6000610ae98284610aac565b915081905092915050565b600082825260208201905092915050565b6000610b1082610a6c565b610b1a8185610af4565b9350610b2a818560208601610a82565b610b3381610683565b840191505092915050565b6000606082019050610b536000830186610537565b8181036020830152610b658185610b05565b9050610b7460408301846105c0565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610bef82610bda565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c2157610c20610bab565b5b60018201905091905056fea2646970667358221220b958692d96e3afb3690f8e0b120f802d2a4a2ae371acf7d7b21550609ef7396f64736f6c63430008130033";

type DNSRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DNSRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DNSRegistry__factory extends ContractFactory {
  constructor(...args: DNSRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DNSRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DNSRegistry__factory {
    return super.connect(runner) as DNSRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DNSRegistryInterface {
    return new Interface(_abi) as DNSRegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DNSRegistry {
    return new Contract(address, _abi, runner) as unknown as DNSRegistry;
  }
}
