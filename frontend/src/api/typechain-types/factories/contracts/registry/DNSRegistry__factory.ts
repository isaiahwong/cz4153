/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DNSRegistry,
  DNSRegistryInterface,
} from "../../../contracts/registry/DNSRegistry";

const _abi = [
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "domainPlainText",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NewDomainOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "available",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "domains",
        type: "bytes32[]",
      },
    ],
    name: "bulkResolve",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "cname",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "cnames",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "makeDomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setCName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setSubDomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611970806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b5f182e411610066578063b5f182e414610144578063c4d66de814610174578063c91381e514610190578063ed36e47d146101c0578063f9e54234146101f057610093565b80633b3b57de146100985780636932854f146100c8578063917906b5146100f85780639b24f19514610128575b600080fd5b6100b260048036038101906100ad9190610e2f565b610220565b6040516100bf9190610e9d565b60405180910390f35b6100e260048036038101906100dd9190610e2f565b61029b565b6040516100ef9190610ed3565b60405180910390f35b610112600480360381019061010d9190610f1a565b610345565b60405161011f9190610fd7565b60405180910390f35b610142600480360381019061013d919061112e565b6103e5565b005b61015e6004803603810190610159919061119d565b6105a4565b60405161016b91906111ec565b60405180910390f35b61018e60048036038101906101899190610f1a565b610613565b005b6101aa60048036038101906101a5919061112e565b610840565b6040516101b791906111ec565b60405180910390f35b6101da60048036038101906101d59190610f1a565b610b24565b6040516101e79190610fd7565b60405180910390f35b61020a600480360381019061020591906112cf565b610c31565b60405161021791906113d6565b60405180910390f35b6000610236679b1a626cde0fdafa60c01b610dba565b61024a671e8ee2bb2bcf306960c01b610dba565b61025e67953885357c54504560c01b610dba565b60008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006102b16784c92a5306a498ab60c01b610dba565b6102c56793f60cee05f2352160c01b610dba565b6102d967cdef370a7dec664560c01b610dba565b600073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6001602052806000526040600020600091509050805461036490611427565b80601f016020809104026020016040519081016040528092919081815260200182805461039090611427565b80156103dd5780601f106103b2576101008083540402835291602001916103dd565b820191906000526020600020905b8154815290600101906020018083116103c057829003601f168201915b505050505081565b6103f96721be1d475ccaf41160c01b610dba565b8261040e67eaac03202c96e0ef60c01b610dba565b61042267f56a71c017ac691860c01b610dba565b61043667a90234ba4a1d877a60c01b610dba565b61044a67fbece753a28cc43760c01b610dba565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e4906114a4565b60405180910390fd5b61050167957e9c657c94dab360c01b610dba565b610515678e4db6ecf213263260c01b610dba565b61052967925795aea702ad2560c01b610dba565b61053d67ce35cb80bc5d4caa60c01b610dba565b6105516720efdddb3c86100660c01b610dba565b82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908161059d919061167a565b5050505050565b60006105ba678219dbb4c0568fe860c01b610dba565b6105ce67de8fd824d3d0f4d860c01b610dba565b6105e2676be3e42ab452671f60c01b610dba565b82826040516020016105f592919061176d565b60405160208183030381529060405280519060200120905092915050565b61062767309c2247f8d4117960c01b610dba565b6000610631610dbd565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561067f5750825b9050600060018367ffffffffffffffff161480156106b4575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156106c2575080155b156106f9576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156107495760018560000160086101000a81548160ff0219169083151502179055505b61075d67447ea58a4251c41860c01b610dba565b610771674f1346eeacf5d21e60c01b610dba565b61078567311b779364a76cdd60c01b610dba565b856000808060001b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156108385760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161082f91906117e8565b60405180910390a15b505050505050565b60006108566715d38e88cd8fcae360c01b610dba565b8361086b67eaac03202c96e0ef60c01b610dba565b61087f67f56a71c017ac691860c01b610dba565b61089367a90234ba4a1d877a60c01b610dba565b6108a767fbece753a28cc43760c01b610dba565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461094a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610941906114a4565b60405180910390fd5b61095e67957e9c657c94dab360c01b610dba565b610972678e4db6ecf213263260c01b610dba565b610986678c60e4754c79276160c01b610dba565b61099a6792a560a7ec555f9660c01b610dba565b6109ae673ad75a381899bd3b60c01b610dba565b6109c267d65788df6ac02b3760c01b610dba565b6000846040516020016109d5919061183f565b604051602081830303815290604052805190602001209050610a016713cfec00c37d9ad160c01b610dba565b610a1567590b1662ce48fd7960c01b610dba565b6000610a2187836105a4565b9050610a3767e3804bfcf2fa174a60c01b610dba565b8460008083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a9f673d177fe340ea8ea660c01b610dba565b610ab367934198ab6388e01060c01b610dba565b867ffe3504a1644f9523da19bb06fcbeffd519608ccc63bf4898bb1d6a1c8f04b4b6838888604051610ae793929190611856565b60405180910390a2610b0367ee06b3aeac89506c60c01b610dba565b610b17672c8c5bf4479f750660c01b610dba565b8093505050509392505050565b6060610b3a67bda572d7b91f915f60c01b610dba565b610b4e678569cc9e7169afdd60c01b610dba565b610b6267ee207a2970f0420d60c01b610dba565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610bac90611427565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd890611427565b8015610c255780601f10610bfa57610100808354040283529160200191610c25565b820191906000526020600020905b815481529060010190602001808311610c0857829003601f168201915b50505050509050919050565b6060610c476766cd7b8740568bc560c01b610dba565b610c5b675c90e7fccb947ea260c01b610dba565b610c6f677c7eadea14576ba360c01b610dba565b6000825167ffffffffffffffff811115610c8c57610c8b611003565b5b604051908082528060200260200182016040528015610cba5781602001602082028036833780820191505090505b509050610cd16759c93143548f5cff60c01b610dba565b610ce567a9db035ee8e812db60c01b610dba565b60005b8351811015610d8857610d0567100b1c8605824b3560c01b610dba565b610d28848281518110610d1b57610d1a611894565b5b6020026020010151610220565b828281518110610d3b57610d3a611894565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610d80906118f2565b915050610ce8565b50610d9d67120a1664f132eaac60c01b610dba565b610db167115ef06047cb9e6360c01b610dba565b80915050919050565b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610e0c81610df9565b8114610e1757600080fd5b50565b600081359050610e2981610e03565b92915050565b600060208284031215610e4557610e44610def565b5b6000610e5384828501610e1a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e8782610e5c565b9050919050565b610e9781610e7c565b82525050565b6000602082019050610eb26000830184610e8e565b92915050565b60008115159050919050565b610ecd81610eb8565b82525050565b6000602082019050610ee86000830184610ec4565b92915050565b610ef781610e7c565b8114610f0257600080fd5b50565b600081359050610f1481610eee565b92915050565b600060208284031215610f3057610f2f610def565b5b6000610f3e84828501610f05565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f81578082015181840152602081019050610f66565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fa982610f47565b610fb38185610f52565b9350610fc3818560208601610f63565b610fcc81610f8d565b840191505092915050565b60006020820190508181036000830152610ff18184610f9e565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61103b82610f8d565b810181811067ffffffffffffffff8211171561105a57611059611003565b5b80604052505050565b600061106d610de5565b90506110798282611032565b919050565b600067ffffffffffffffff82111561109957611098611003565b5b6110a282610f8d565b9050602081019050919050565b82818337600083830152505050565b60006110d16110cc8461107e565b611063565b9050828152602081018484840111156110ed576110ec610ffe565b5b6110f88482856110af565b509392505050565b600082601f83011261111557611114610ff9565b5b81356111258482602086016110be565b91505092915050565b60008060006060848603121561114757611146610def565b5b600061115586828701610e1a565b935050602084013567ffffffffffffffff81111561117657611175610df4565b5b61118286828701611100565b925050604061119386828701610f05565b9150509250925092565b600080604083850312156111b4576111b3610def565b5b60006111c285828601610e1a565b92505060206111d385828601610e1a565b9150509250929050565b6111e681610df9565b82525050565b600060208201905061120160008301846111dd565b92915050565b600067ffffffffffffffff82111561122257611221611003565b5b602082029050602081019050919050565b600080fd5b600061124b61124684611207565b611063565b9050808382526020820190506020840283018581111561126e5761126d611233565b5b835b8181101561129757806112838882610e1a565b845260208401935050602081019050611270565b5050509392505050565b600082601f8301126112b6576112b5610ff9565b5b81356112c6848260208601611238565b91505092915050565b6000602082840312156112e5576112e4610def565b5b600082013567ffffffffffffffff81111561130357611302610df4565b5b61130f848285016112a1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61134d81610e7c565b82525050565b600061135f8383611344565b60208301905092915050565b6000602082019050919050565b600061138382611318565b61138d8185611323565b935061139883611334565b8060005b838110156113c95781516113b08882611353565b97506113bb8361136b565b92505060018101905061139c565b5085935050505092915050565b600060208201905081810360008301526113f08184611378565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061143f57607f821691505b602082108103611452576114516113f8565b5b50919050565b7f6e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b600061148e600e83610f52565b915061149982611458565b602082019050919050565b600060208201905081810360008301526114bd81611481565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026115267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826114e9565b61153086836114e9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061157761157261156d84611548565b611552565b611548565b9050919050565b6000819050919050565b6115918361155c565b6115a561159d8261157e565b8484546114f6565b825550505050565b600090565b6115ba6115ad565b6115c5818484611588565b505050565b5b818110156115e9576115de6000826115b2565b6001810190506115cb565b5050565b601f82111561162e576115ff816114c4565b611608846114d9565b81016020851015611617578190505b61162b611623856114d9565b8301826115ca565b50505b505050565b600082821c905092915050565b600061165160001984600802611633565b1980831691505092915050565b600061166a8383611640565b9150826002028217905092915050565b61168382610f47565b67ffffffffffffffff81111561169c5761169b611003565b5b6116a68254611427565b6116b18282856115ed565b600060209050601f8311600181146116e457600084156116d2578287015190505b6116dc858261165e565b865550611744565b601f1984166116f2866114c4565b60005b8281101561171a578489015182556001820191506020850194506020810190506116f5565b868310156117375784890151611733601f891682611640565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b61176761176282610df9565b61174c565b82525050565b60006117798285611756565b6020820191506117898284611756565b6020820191508190509392505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006117d26117cd6117c884611799565b611552565b6117a3565b9050919050565b6117e2816117b7565b82525050565b60006020820190506117fd60008301846117d9565b92915050565b600081905092915050565b600061181982610f47565b6118238185611803565b9350611833818560208601610f63565b80840191505092915050565b600061184b828461180e565b915081905092915050565b600060608201905061186b60008301866111dd565b818103602083015261187d8185610f9e565b905061188c6040830184610e8e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118fd82611548565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361192f5761192e6118c3565b5b60018201905091905056fea2646970667358221220c2355826e5a193c18d3cf8ef368c1f00541f067ddbbc5f5c9e5c0cda13566f7564736f6c63430008140033";

type DNSRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DNSRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DNSRegistry__factory extends ContractFactory {
  constructor(...args: DNSRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DNSRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DNSRegistry__factory {
    return super.connect(runner) as DNSRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DNSRegistryInterface {
    return new Interface(_abi) as DNSRegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DNSRegistry {
    return new Contract(address, _abi, runner) as unknown as DNSRegistry;
  }
}
