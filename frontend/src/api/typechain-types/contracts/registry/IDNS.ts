/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDNSInterface extends Interface {
  getFunction(nameOrSignature: "addr" | "setSubDomain"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewDomainOwner"): EventFragment;

  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setSubDomain",
    values: [BytesLike, string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubDomain",
    data: BytesLike
  ): Result;
}

export namespace NewDomainOwnerEvent {
  export type InputTuple = [
    parentDomain: BytesLike,
    domain: BytesLike,
    domainPlainText: string,
    owner: AddressLike
  ];
  export type OutputTuple = [
    parentDomain: string,
    domain: string,
    domainPlainText: string,
    owner: string
  ];
  export interface OutputObject {
    parentDomain: string;
    domain: string;
    domainPlainText: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDNS extends BaseContract {
  connect(runner?: ContractRunner | null): IDNS;
  waitForDeployment(): Promise<this>;

  interface: IDNSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addr: TypedContractMethod<[domain: BytesLike], [string], "view">;

  setSubDomain: TypedContractMethod<
    [parentDomain: BytesLike, domain: string, owner: AddressLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addr"
  ): TypedContractMethod<[domain: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setSubDomain"
  ): TypedContractMethod<
    [parentDomain: BytesLike, domain: string, owner: AddressLike],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "NewDomainOwner"
  ): TypedContractEvent<
    NewDomainOwnerEvent.InputTuple,
    NewDomainOwnerEvent.OutputTuple,
    NewDomainOwnerEvent.OutputObject
  >;

  filters: {
    "NewDomainOwner(bytes32,bytes32,string,address)": TypedContractEvent<
      NewDomainOwnerEvent.InputTuple,
      NewDomainOwnerEvent.OutputTuple,
      NewDomainOwnerEvent.OutputObject
    >;
    NewDomainOwner: TypedContractEvent<
      NewDomainOwnerEvent.InputTuple,
      NewDomainOwnerEvent.OutputTuple,
      NewDomainOwnerEvent.OutputObject
    >;
  };
}
