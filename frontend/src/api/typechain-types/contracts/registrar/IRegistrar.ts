/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IRegistrarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionDeadline"
      | "auctionHighestBid"
      | "auctionHighestBidder"
      | "commit"
      | "expiry"
      | "getAuctionDuration"
      | "hasAuctionExpired"
      | "hasCommitment"
      | "hasDomainCommitment"
      | "hasDomainExpired"
      | "makeDomainCommitment"
      | "revealRegister"
      | "setCName"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DomainBidFailed" | "DomainRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionDeadline",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionHighestBid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionHighestBidder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "expiry", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuctionExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDomainCommitment",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDomainExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeDomainCommitment",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealRegister",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setCName", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "auctionDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuctionExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDomainCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDomainExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeDomainCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCName", data: BytesLike): Result;
}

export namespace DomainBidFailedEvent {
  export type InputTuple = [
    owner: AddressLike,
    tldHash: BytesLike,
    domainHash: BytesLike,
    tld: string,
    domain: string,
    expires: BigNumberish,
    refund: BigNumberish,
    highestBid: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tldHash: string,
    domainHash: string,
    tld: string,
    domain: string,
    expires: bigint,
    refund: bigint,
    highestBid: bigint
  ];
  export interface OutputObject {
    owner: string;
    tldHash: string;
    domainHash: string;
    tld: string;
    domain: string;
    expires: bigint;
    refund: bigint;
    highestBid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRegisteredEvent {
  export type InputTuple = [
    owner: AddressLike,
    tldHash: BytesLike,
    domainHash: BytesLike,
    tld: string,
    domain: string,
    expires: BigNumberish,
    cost: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tldHash: string,
    domainHash: string,
    tld: string,
    domain: string,
    expires: bigint,
    cost: bigint
  ];
  export interface OutputObject {
    owner: string;
    tldHash: string;
    domainHash: string;
    tld: string;
    domain: string;
    expires: bigint;
    cost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRegistrar extends BaseContract {
  connect(runner?: ContractRunner | null): IRegistrar;
  waitForDeployment(): Promise<this>;

  interface: IRegistrarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionDeadline: TypedContractMethod<[label: BytesLike], [bigint], "view">;

  auctionHighestBid: TypedContractMethod<[label: BytesLike], [bigint], "view">;

  auctionHighestBidder: TypedContractMethod<
    [label: BytesLike],
    [string],
    "view"
  >;

  commit: TypedContractMethod<
    [domain: BytesLike, secret: BytesLike],
    [string],
    "payable"
  >;

  expiry: TypedContractMethod<[domain: BytesLike], [bigint], "view">;

  getAuctionDuration: TypedContractMethod<[], [bigint], "view">;

  hasAuctionExpired: TypedContractMethod<[label: BytesLike], [boolean], "view">;

  hasCommitment: TypedContractMethod<
    [commitment: BytesLike],
    [boolean],
    "view"
  >;

  hasDomainCommitment: TypedContractMethod<
    [domain: BytesLike, secret: BytesLike, value: BigNumberish],
    [boolean],
    "view"
  >;

  hasDomainExpired: TypedContractMethod<[domain: BytesLike], [boolean], "view">;

  makeDomainCommitment: TypedContractMethod<
    [domain: BytesLike, secret: BytesLike, value: BigNumberish],
    [string],
    "view"
  >;

  revealRegister: TypedContractMethod<
    [domain: string, secret: BytesLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  setCName: TypedContractMethod<[domain: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionDeadline"
  ): TypedContractMethod<[label: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionHighestBid"
  ): TypedContractMethod<[label: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionHighestBidder"
  ): TypedContractMethod<[label: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "commit"
  ): TypedContractMethod<
    [domain: BytesLike, secret: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "expiry"
  ): TypedContractMethod<[domain: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuctionDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasAuctionExpired"
  ): TypedContractMethod<[label: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasCommitment"
  ): TypedContractMethod<[commitment: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasDomainCommitment"
  ): TypedContractMethod<
    [domain: BytesLike, secret: BytesLike, value: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasDomainExpired"
  ): TypedContractMethod<[domain: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "makeDomainCommitment"
  ): TypedContractMethod<
    [domain: BytesLike, secret: BytesLike, value: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "revealRegister"
  ): TypedContractMethod<
    [domain: string, secret: BytesLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCName"
  ): TypedContractMethod<[domain: string], [void], "nonpayable">;

  getEvent(
    key: "DomainBidFailed"
  ): TypedContractEvent<
    DomainBidFailedEvent.InputTuple,
    DomainBidFailedEvent.OutputTuple,
    DomainBidFailedEvent.OutputObject
  >;
  getEvent(
    key: "DomainRegistered"
  ): TypedContractEvent<
    DomainRegisteredEvent.InputTuple,
    DomainRegisteredEvent.OutputTuple,
    DomainRegisteredEvent.OutputObject
  >;

  filters: {
    "DomainBidFailed(address,bytes32,bytes32,string,string,uint256,uint256,uint256)": TypedContractEvent<
      DomainBidFailedEvent.InputTuple,
      DomainBidFailedEvent.OutputTuple,
      DomainBidFailedEvent.OutputObject
    >;
    DomainBidFailed: TypedContractEvent<
      DomainBidFailedEvent.InputTuple,
      DomainBidFailedEvent.OutputTuple,
      DomainBidFailedEvent.OutputObject
    >;

    "DomainRegistered(address,bytes32,bytes32,string,string,uint256,uint256)": TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;
    DomainRegistered: TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;
  };
}
