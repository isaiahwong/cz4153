/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DNSRegistry,
  DNSRegistryInterface,
} from "../../../contracts/registry/DNSRegistry";

const _abi = [
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "domainPlainText",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NewDomainOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "available",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "domains",
        type: "bytes32[]",
      },
    ],
    name: "bulkResolve",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "cname",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "cnames",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "makeDomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setCName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setSubDomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061155c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b5f182e411610066578063b5f182e414610144578063c4d66de814610174578063c91381e514610190578063ed36e47d146101c0578063f9e54234146101f057610093565b80633b3b57de146100985780636932854f146100c8578063917906b5146100f85780639b24f19514610128575b600080fd5b6100b260048036038101906100ad9190610a1b565b610220565b6040516100bf9190610a89565b60405180910390f35b6100e260048036038101906100dd9190610a1b565b61025f565b6040516100ef9190610abf565b60405180910390f35b610112600480360381019061010d9190610b06565b6102cc565b60405161011f9190610bc3565b60405180910390f35b610142600480360381019061013d9190610d1a565b61036c565b005b61015e60048036038101906101599190610d89565b610463565b60405161016b9190610dd8565b60405180910390f35b61018e60048036038101906101899190610b06565b610496565b005b6101aa60048036038101906101a59190610d1a565b610673565b6040516101b79190610dd8565b60405180910390f35b6101da60048036038101906101d59190610b06565b6107ef565b6040516101e79190610bc3565b60405180910390f35b61020a60048036038101906102059190610ebb565b6108c0565b6040516102179190610fc2565b60405180910390f35b600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b600160205280600052604060002060009150905080546102eb90611013565b80601f016020809104026020016040519081016040528092919081815260200182805461031790611013565b80156103645780601f1061033957610100808354040283529160200191610364565b820191906000526020600020905b81548152906001019060200180831161034757829003601f168201915b505050505081565b823373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040790611090565b60405180910390fd5b82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908161045c9190611266565b5050505050565b60008282604051602001610478929190611359565b60405160208183030381529060405280519060200120905092915050565b60006104a06109a9565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156104ee5750825b9050600060018367ffffffffffffffff16148015610523575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610531575080155b15610568576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156105b85760018560000160086101000a81548160ff0219169083151502179055505b856000808060001b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550831561066b5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161066291906113d4565b60405180910390a15b505050505050565b6000833373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071090611090565b60405180910390fd5b60008460405160200161072c919061142b565b60405160208183030381529060405280519060200120905060006107508783610463565b90508460008083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550867ffe3504a1644f9523da19bb06fcbeffd519608ccc63bf4898bb1d6a1c8f04b4b68388886040516107da93929190611442565b60405180910390a28093505050509392505050565b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461083b90611013565b80601f016020809104026020016040519081016040528092919081815260200182805461086790611013565b80156108b45780601f10610889576101008083540402835291602001916108b4565b820191906000526020600020905b81548152906001019060200180831161089757829003601f168201915b50505050509050919050565b60606000825167ffffffffffffffff8111156108df576108de610bef565b5b60405190808252806020026020018201604052801561090d5781602001602082028036833780820191505090505b50905060005b835181101561099f5761093f84828151811061093257610931611480565b5b6020026020010151610220565b82828151811061095257610951611480565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610997906114de565b915050610913565b5080915050919050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6109f8816109e5565b8114610a0357600080fd5b50565b600081359050610a15816109ef565b92915050565b600060208284031215610a3157610a306109db565b5b6000610a3f84828501610a06565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7382610a48565b9050919050565b610a8381610a68565b82525050565b6000602082019050610a9e6000830184610a7a565b92915050565b60008115159050919050565b610ab981610aa4565b82525050565b6000602082019050610ad46000830184610ab0565b92915050565b610ae381610a68565b8114610aee57600080fd5b50565b600081359050610b0081610ada565b92915050565b600060208284031215610b1c57610b1b6109db565b5b6000610b2a84828501610af1565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b6d578082015181840152602081019050610b52565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b9582610b33565b610b9f8185610b3e565b9350610baf818560208601610b4f565b610bb881610b79565b840191505092915050565b60006020820190508181036000830152610bdd8184610b8a565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c2782610b79565b810181811067ffffffffffffffff82111715610c4657610c45610bef565b5b80604052505050565b6000610c596109d1565b9050610c658282610c1e565b919050565b600067ffffffffffffffff821115610c8557610c84610bef565b5b610c8e82610b79565b9050602081019050919050565b82818337600083830152505050565b6000610cbd610cb884610c6a565b610c4f565b905082815260208101848484011115610cd957610cd8610bea565b5b610ce4848285610c9b565b509392505050565b600082601f830112610d0157610d00610be5565b5b8135610d11848260208601610caa565b91505092915050565b600080600060608486031215610d3357610d326109db565b5b6000610d4186828701610a06565b935050602084013567ffffffffffffffff811115610d6257610d616109e0565b5b610d6e86828701610cec565b9250506040610d7f86828701610af1565b9150509250925092565b60008060408385031215610da057610d9f6109db565b5b6000610dae85828601610a06565b9250506020610dbf85828601610a06565b9150509250929050565b610dd2816109e5565b82525050565b6000602082019050610ded6000830184610dc9565b92915050565b600067ffffffffffffffff821115610e0e57610e0d610bef565b5b602082029050602081019050919050565b600080fd5b6000610e37610e3284610df3565b610c4f565b90508083825260208201905060208402830185811115610e5a57610e59610e1f565b5b835b81811015610e835780610e6f8882610a06565b845260208401935050602081019050610e5c565b5050509392505050565b600082601f830112610ea257610ea1610be5565b5b8135610eb2848260208601610e24565b91505092915050565b600060208284031215610ed157610ed06109db565b5b600082013567ffffffffffffffff811115610eef57610eee6109e0565b5b610efb84828501610e8d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610f3981610a68565b82525050565b6000610f4b8383610f30565b60208301905092915050565b6000602082019050919050565b6000610f6f82610f04565b610f798185610f0f565b9350610f8483610f20565b8060005b83811015610fb5578151610f9c8882610f3f565b9750610fa783610f57565b925050600181019050610f88565b5085935050505092915050565b60006020820190508181036000830152610fdc8184610f64565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061102b57607f821691505b60208210810361103e5761103d610fe4565b5b50919050565b7f6e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b600061107a600e83610b3e565b915061108582611044565b602082019050919050565b600060208201905081810360008301526110a98161106d565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026111127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826110d5565b61111c86836110d5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061116361115e61115984611134565b61113e565b611134565b9050919050565b6000819050919050565b61117d83611148565b6111916111898261116a565b8484546110e2565b825550505050565b600090565b6111a6611199565b6111b1818484611174565b505050565b5b818110156111d5576111ca60008261119e565b6001810190506111b7565b5050565b601f82111561121a576111eb816110b0565b6111f4846110c5565b81016020851015611203578190505b61121761120f856110c5565b8301826111b6565b50505b505050565b600082821c905092915050565b600061123d6000198460080261121f565b1980831691505092915050565b6000611256838361122c565b9150826002028217905092915050565b61126f82610b33565b67ffffffffffffffff81111561128857611287610bef565b5b6112928254611013565b61129d8282856111d9565b600060209050601f8311600181146112d057600084156112be578287015190505b6112c8858261124a565b865550611330565b601f1984166112de866110b0565b60005b82811015611306578489015182556001820191506020850194506020810190506112e1565b86831015611323578489015161131f601f89168261122c565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b61135361134e826109e5565b611338565b82525050565b60006113658285611342565b6020820191506113758284611342565b6020820191508190509392505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006113be6113b96113b484611385565b61113e565b61138f565b9050919050565b6113ce816113a3565b82525050565b60006020820190506113e960008301846113c5565b92915050565b600081905092915050565b600061140582610b33565b61140f81856113ef565b935061141f818560208601610b4f565b80840191505092915050565b600061143782846113fa565b915081905092915050565b60006060820190506114576000830186610dc9565b81810360208301526114698185610b8a565b90506114786040830184610a7a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114e982611134565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361151b5761151a6114af565b5b60018201905091905056fea26469706673582212207a42214e7570121c1b211eb5f1cc52aef838b3a0d0e6a91d6cd9495ed3f8bf4a64736f6c63430008140033";

type DNSRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DNSRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DNSRegistry__factory extends ContractFactory {
  constructor(...args: DNSRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DNSRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DNSRegistry__factory {
    return super.connect(runner) as DNSRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DNSRegistryInterface {
    return new Interface(_abi) as DNSRegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DNSRegistry {
    return new Contract(address, _abi, runner) as unknown as DNSRegistry;
  }
}
