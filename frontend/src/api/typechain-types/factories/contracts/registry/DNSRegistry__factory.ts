/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DNSRegistry,
  DNSRegistryInterface,
} from "../../../contracts/registry/DNSRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "domainPlainText",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NewDomainOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "available",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "domains",
        type: "bytes32[]",
      },
    ],
    name: "bulkResolve",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "cname",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "cnames",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "makeDomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setCName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setSubDomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002b67ee207a2970f0420d60c01b6100a160201b60201c565b610045679b1a626cde0fdafa60c01b6100a160201b60201c565b336000808060001b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100a4565b50565b611689806100b36000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b5f182e41161005b578063b5f182e414610139578063c91381e514610169578063ed36e47d14610199578063f9e54234146101c957610088565b80633b3b57de1461008d5780636932854f146100bd578063917906b5146100ed5780639b24f1951461011d575b600080fd5b6100a760048036038101906100a29190610bb2565b6101f9565b6040516100b49190610c20565b60405180910390f35b6100d760048036038101906100d29190610bb2565b610274565b6040516100e49190610c56565b60405180910390f35b61010760048036038101906101029190610c9d565b61031e565b6040516101149190610d5a565b60405180910390f35b61013760048036038101906101329190610eb1565b6103be565b005b610153600480360381019061014e9190610f20565b61057d565b6040516101609190610f6f565b60405180910390f35b610183600480360381019061017e9190610eb1565b6105ec565b6040516101909190610f6f565b60405180910390f35b6101b360048036038101906101ae9190610c9d565b6108cf565b6040516101c09190610d5a565b60405180910390f35b6101e360048036038101906101de9190611052565b6109dc565b6040516101f09190611159565b60405180910390f35b600061020f67e50543f2edffd80460c01b610b65565b61022367aac5ab936914db0760c01b610b65565b61023767b5c5715efc8f687860c01b610b65565b60008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061028a67b6a8f491a6a932e860c01b610b65565b61029e67f5b3489da86545d260c01b610b65565b6102b267370e7e229010ef6660c01b610b65565b600073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6001602052806000526040600020600091509050805461033d906111aa565b80601f0160208091040260200160405190810160405280929190818152602001828054610369906111aa565b80156103b65780601f1061038b576101008083540402835291602001916103b6565b820191906000526020600020905b81548152906001019060200180831161039957829003601f168201915b505050505081565b6103d267924f87c4e46745c060c01b610b65565b826103e76795afaa4a4618d76e60c01b610b65565b6103fb6708f66719b0874cc060c01b610b65565b61040f67ce35cb80bc5d4caa60c01b610b65565b6104236720efdddb3c86100660c01b610b65565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bd90611227565b60405180910390fd5b6104da67bda572d7b91f915f60c01b610b65565b6104ee678569cc9e7169afdd60c01b610b65565b610502672287cd7040da616860c01b610b65565b610516670852f6bf19ce0e4a60c01b610b65565b61052a67187d006a3defb87960c01b610b65565b82600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908161057691906113fd565b5050505050565b6000610593671e8ee2bb2bcf306960c01b610b65565b6105a767953885357c54504560c01b610b65565b6105bb6784c92a5306a498ab60c01b610b65565b82826040516020016105ce9291906114f0565b60405160208183030381529060405280519060200120905092915050565b6000610602671017ca1f29dbc93b60c01b610b65565b836106176795afaa4a4618d76e60c01b610b65565b61062b6708f66719b0874cc060c01b610b65565b61063f67ce35cb80bc5d4caa60c01b610b65565b6106536720efdddb3c86100660c01b610b65565b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90611227565b60405180910390fd5b61070a67bda572d7b91f915f60c01b610b65565b61071e678569cc9e7169afdd60c01b610b65565b610732670baf8dc7dc35513d60c01b610b65565b6107466766cd7b8740568bc560c01b610b65565b61075a675c90e7fccb947ea260c01b610b65565b61076e677c7eadea14576ba360c01b610b65565b6000846040516020016107819190611558565b6040516020818303038152906040528051906020012090506107ad6759c93143548f5cff60c01b610b65565b6107c167a9db035ee8e812db60c01b610b65565b60006107cd878361057d565b90506107e367100b1c8605824b3560c01b610b65565b8460008083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061084b67120a1664f132eaac60c01b610b65565b61085f67115ef06047cb9e6360c01b610b65565b867ffe3504a1644f9523da19bb06fcbeffd519608ccc63bf4898bb1d6a1c8f04b4b68388886040516108939392919061156f565b60405180910390a26108ae666152f30f92909760c01b610b65565b6108c2675114ec0870b3fbf460c01b610b65565b8093505050509392505050565b60606108e5671b15ee16db3c34b460c01b610b65565b6108f967be68e6143579dfec60c01b610b65565b61090d67d0d712bbc83fe0f860c01b610b65565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054610957906111aa565b80601f0160208091040260200160405190810160405280929190818152602001828054610983906111aa565b80156109d05780601f106109a5576101008083540402835291602001916109d0565b820191906000526020600020905b8154815290600101906020018083116109b357829003601f168201915b50505050509050919050565b60606109f267089b74561397d20960c01b610b65565b610a06675a3691a71942190760c01b610b65565b610a1a67cfc728479bd4280e60c01b610b65565b6000825167ffffffffffffffff811115610a3757610a36610d86565b5b604051908082528060200260200182016040528015610a655781602001602082028036833780820191505090505b509050610a7c67c4afc2075eff915a60c01b610b65565b610a906780e4ee74b8f99cf560c01b610b65565b60005b8351811015610b3357610ab067d4f6409acce9341c60c01b610b65565b610ad3848281518110610ac657610ac56115ad565b5b60200260200101516101f9565b828281518110610ae657610ae56115ad565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610b2b9061160b565b915050610a93565b50610b4867e6ac1b7c4d7a4c7660c01b610b65565b610b5c67132cc431c9a52a9e60c01b610b65565b80915050919050565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b8f81610b7c565b8114610b9a57600080fd5b50565b600081359050610bac81610b86565b92915050565b600060208284031215610bc857610bc7610b72565b5b6000610bd684828501610b9d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c0a82610bdf565b9050919050565b610c1a81610bff565b82525050565b6000602082019050610c356000830184610c11565b92915050565b60008115159050919050565b610c5081610c3b565b82525050565b6000602082019050610c6b6000830184610c47565b92915050565b610c7a81610bff565b8114610c8557600080fd5b50565b600081359050610c9781610c71565b92915050565b600060208284031215610cb357610cb2610b72565b5b6000610cc184828501610c88565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d04578082015181840152602081019050610ce9565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d2c82610cca565b610d368185610cd5565b9350610d46818560208601610ce6565b610d4f81610d10565b840191505092915050565b60006020820190508181036000830152610d748184610d21565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dbe82610d10565b810181811067ffffffffffffffff82111715610ddd57610ddc610d86565b5b80604052505050565b6000610df0610b68565b9050610dfc8282610db5565b919050565b600067ffffffffffffffff821115610e1c57610e1b610d86565b5b610e2582610d10565b9050602081019050919050565b82818337600083830152505050565b6000610e54610e4f84610e01565b610de6565b905082815260208101848484011115610e7057610e6f610d81565b5b610e7b848285610e32565b509392505050565b600082601f830112610e9857610e97610d7c565b5b8135610ea8848260208601610e41565b91505092915050565b600080600060608486031215610eca57610ec9610b72565b5b6000610ed886828701610b9d565b935050602084013567ffffffffffffffff811115610ef957610ef8610b77565b5b610f0586828701610e83565b9250506040610f1686828701610c88565b9150509250925092565b60008060408385031215610f3757610f36610b72565b5b6000610f4585828601610b9d565b9250506020610f5685828601610b9d565b9150509250929050565b610f6981610b7c565b82525050565b6000602082019050610f846000830184610f60565b92915050565b600067ffffffffffffffff821115610fa557610fa4610d86565b5b602082029050602081019050919050565b600080fd5b6000610fce610fc984610f8a565b610de6565b90508083825260208201905060208402830185811115610ff157610ff0610fb6565b5b835b8181101561101a57806110068882610b9d565b845260208401935050602081019050610ff3565b5050509392505050565b600082601f83011261103957611038610d7c565b5b8135611049848260208601610fbb565b91505092915050565b60006020828403121561106857611067610b72565b5b600082013567ffffffffffffffff81111561108657611085610b77565b5b61109284828501611024565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110d081610bff565b82525050565b60006110e283836110c7565b60208301905092915050565b6000602082019050919050565b60006111068261109b565b61111081856110a6565b935061111b836110b7565b8060005b8381101561114c57815161113388826110d6565b975061113e836110ee565b92505060018101905061111f565b5085935050505092915050565b6000602082019050818103600083015261117381846110fb565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111c257607f821691505b6020821081036111d5576111d461117b565b5b50919050565b7f6e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b6000611211600e83610cd5565b915061121c826111db565b602082019050919050565b6000602082019050818103600083015261124081611204565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026112a97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261126c565b6112b3868361126c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006112fa6112f56112f0846112cb565b6112d5565b6112cb565b9050919050565b6000819050919050565b611314836112df565b61132861132082611301565b848454611279565b825550505050565b600090565b61133d611330565b61134881848461130b565b505050565b5b8181101561136c57611361600082611335565b60018101905061134e565b5050565b601f8211156113b15761138281611247565b61138b8461125c565b8101602085101561139a578190505b6113ae6113a68561125c565b83018261134d565b50505b505050565b600082821c905092915050565b60006113d4600019846008026113b6565b1980831691505092915050565b60006113ed83836113c3565b9150826002028217905092915050565b61140682610cca565b67ffffffffffffffff81111561141f5761141e610d86565b5b61142982546111aa565b611434828285611370565b600060209050601f8311600181146114675760008415611455578287015190505b61145f85826113e1565b8655506114c7565b601f19841661147586611247565b60005b8281101561149d57848901518255600182019150602085019450602081019050611478565b868310156114ba57848901516114b6601f8916826113c3565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b6114ea6114e582610b7c565b6114cf565b82525050565b60006114fc82856114d9565b60208201915061150c82846114d9565b6020820191508190509392505050565b600081905092915050565b600061153282610cca565b61153c818561151c565b935061154c818560208601610ce6565b80840191505092915050565b60006115648284611527565b915081905092915050565b60006060820190506115846000830186610f60565b81810360208301526115968185610d21565b90506115a56040830184610c11565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611616826112cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611648576116476115dc565b5b60018201905091905056fea2646970667358221220e204894225ef341b17574f3cfd02426784b8ad089bcf933184fc2d45c40c2a6564736f6c63430008130033";

type DNSRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DNSRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DNSRegistry__factory extends ContractFactory {
  constructor(...args: DNSRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DNSRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DNSRegistry__factory {
    return super.connect(runner) as DNSRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DNSRegistryInterface {
    return new Interface(_abi) as DNSRegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DNSRegistry {
    return new Contract(address, _abi, runner) as unknown as DNSRegistry;
  }
}
