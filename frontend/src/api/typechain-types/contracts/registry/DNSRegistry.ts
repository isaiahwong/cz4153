/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DNSRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addr"
      | "available"
      | "bulkResolve"
      | "cname"
      | "cnames"
      | "initialize"
      | "makeDomain"
      | "setCName"
      | "setSubDomain"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "NewDomainOwner"
  ): EventFragment;

  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "available",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkResolve",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "cname", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "cnames", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeDomain",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCName",
    values: [BytesLike, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubDomain",
    values: [BytesLike, string, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cnames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeDomain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubDomain",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDomainOwnerEvent {
  export type InputTuple = [
    parentDomain: BytesLike,
    domain: BytesLike,
    domainPlainText: string,
    owner: AddressLike
  ];
  export type OutputTuple = [
    parentDomain: string,
    domain: string,
    domainPlainText: string,
    owner: string
  ];
  export interface OutputObject {
    parentDomain: string;
    domain: string;
    domainPlainText: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DNSRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DNSRegistry;
  waitForDeployment(): Promise<this>;

  interface: DNSRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addr: TypedContractMethod<[domain: BytesLike], [string], "view">;

  available: TypedContractMethod<[domain: BytesLike], [boolean], "view">;

  bulkResolve: TypedContractMethod<[domains: BytesLike[]], [string[]], "view">;

  cname: TypedContractMethod<[owner: AddressLike], [string], "view">;

  cnames: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  initialize: TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;

  makeDomain: TypedContractMethod<
    [parentDomain: BytesLike, domain: BytesLike],
    [string],
    "view"
  >;

  setCName: TypedContractMethod<
    [parentDomain: BytesLike, domain: string, owner: AddressLike],
    [void],
    "nonpayable"
  >;

  setSubDomain: TypedContractMethod<
    [parentDomain: BytesLike, domain: string, owner: AddressLike],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addr"
  ): TypedContractMethod<[domain: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "available"
  ): TypedContractMethod<[domain: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bulkResolve"
  ): TypedContractMethod<[domains: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "cname"
  ): TypedContractMethod<[owner: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "cnames"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "makeDomain"
  ): TypedContractMethod<
    [parentDomain: BytesLike, domain: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setCName"
  ): TypedContractMethod<
    [parentDomain: BytesLike, domain: string, owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubDomain"
  ): TypedContractMethod<
    [parentDomain: BytesLike, domain: string, owner: AddressLike],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewDomainOwner"
  ): TypedContractEvent<
    NewDomainOwnerEvent.InputTuple,
    NewDomainOwnerEvent.OutputTuple,
    NewDomainOwnerEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewDomainOwner(bytes32,bytes32,string,address)": TypedContractEvent<
      NewDomainOwnerEvent.InputTuple,
      NewDomainOwnerEvent.OutputTuple,
      NewDomainOwnerEvent.OutputObject
    >;
    NewDomainOwner: TypedContractEvent<
      NewDomainOwnerEvent.InputTuple,
      NewDomainOwnerEvent.OutputTuple,
      NewDomainOwnerEvent.OutputObject
    >;
  };
}
