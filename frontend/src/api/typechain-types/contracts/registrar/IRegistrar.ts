/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IRegistrarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "auctionDeadline"
      | "auctionHighestBid"
      | "auctionHighestBidder"
      | "commit"
      | "getAuctionDuration"
      | "hasAuctionExpired"
      | "hasSubdomainExpired"
      | "revealRegister"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "SubdomainBidFailed" | "SubdomainRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "auctionDeadline",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionHighestBid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionHighestBidder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commit",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuctionExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubdomainExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealRegister",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionHighestBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuctionExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubdomainExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealRegister",
    data: BytesLike
  ): Result;
}

export namespace SubdomainBidFailedEvent {
  export type InputTuple = [
    owner: AddressLike,
    tldHash: BytesLike,
    subdomainHash: BytesLike,
    tld: string,
    subdomain: string,
    expires: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tldHash: string,
    subdomainHash: string,
    tld: string,
    subdomain: string,
    expires: bigint
  ];
  export interface OutputObject {
    owner: string;
    tldHash: string;
    subdomainHash: string;
    tld: string;
    subdomain: string;
    expires: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubdomainRegisteredEvent {
  export type InputTuple = [
    owner: AddressLike,
    tldHash: BytesLike,
    subdomainHash: BytesLike,
    tld: string,
    subdomain: string,
    expires: BigNumberish,
    cost: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tldHash: string,
    subdomainHash: string,
    tld: string,
    subdomain: string,
    expires: bigint,
    cost: bigint
  ];
  export interface OutputObject {
    owner: string;
    tldHash: string;
    subdomainHash: string;
    tld: string;
    subdomain: string;
    expires: bigint;
    cost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRegistrar extends BaseContract {
  connect(runner?: ContractRunner | null): IRegistrar;
  waitForDeployment(): Promise<this>;

  interface: IRegistrarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  auctionDeadline: TypedContractMethod<[label: BytesLike], [bigint], "view">;

  auctionHighestBid: TypedContractMethod<[label: BytesLike], [bigint], "view">;

  auctionHighestBidder: TypedContractMethod<
    [label: BytesLike],
    [string],
    "view"
  >;

  commit: TypedContractMethod<
    [subdomain: BytesLike, secret: BytesLike],
    [string],
    "payable"
  >;

  getAuctionDuration: TypedContractMethod<[], [bigint], "view">;

  hasAuctionExpired: TypedContractMethod<[label: BytesLike], [boolean], "view">;

  hasSubdomainExpired: TypedContractMethod<
    [subdomain: BytesLike],
    [boolean],
    "view"
  >;

  revealRegister: TypedContractMethod<
    [subdomainPlainText: string, secret: BytesLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "auctionDeadline"
  ): TypedContractMethod<[label: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionHighestBid"
  ): TypedContractMethod<[label: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionHighestBidder"
  ): TypedContractMethod<[label: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "commit"
  ): TypedContractMethod<
    [subdomain: BytesLike, secret: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getAuctionDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasAuctionExpired"
  ): TypedContractMethod<[label: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasSubdomainExpired"
  ): TypedContractMethod<[subdomain: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revealRegister"
  ): TypedContractMethod<
    [subdomainPlainText: string, secret: BytesLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "SubdomainBidFailed"
  ): TypedContractEvent<
    SubdomainBidFailedEvent.InputTuple,
    SubdomainBidFailedEvent.OutputTuple,
    SubdomainBidFailedEvent.OutputObject
  >;
  getEvent(
    key: "SubdomainRegistered"
  ): TypedContractEvent<
    SubdomainRegisteredEvent.InputTuple,
    SubdomainRegisteredEvent.OutputTuple,
    SubdomainRegisteredEvent.OutputObject
  >;

  filters: {
    "SubdomainBidFailed(address,bytes32,bytes32,string,string,uint256)": TypedContractEvent<
      SubdomainBidFailedEvent.InputTuple,
      SubdomainBidFailedEvent.OutputTuple,
      SubdomainBidFailedEvent.OutputObject
    >;
    SubdomainBidFailed: TypedContractEvent<
      SubdomainBidFailedEvent.InputTuple,
      SubdomainBidFailedEvent.OutputTuple,
      SubdomainBidFailedEvent.OutputObject
    >;

    "SubdomainRegistered(address,bytes32,bytes32,string,string,uint256,uint256)": TypedContractEvent<
      SubdomainRegisteredEvent.InputTuple,
      SubdomainRegisteredEvent.OutputTuple,
      SubdomainRegisteredEvent.OutputObject
    >;
    SubdomainRegistered: TypedContractEvent<
      SubdomainRegisteredEvent.InputTuple,
      SubdomainRegisteredEvent.OutputTuple,
      SubdomainRegisteredEvent.OutputObject
    >;
  };
}
