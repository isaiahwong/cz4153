/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  AuctionMock,
  AuctionMockInterface,
} from "../../../../contracts/registrar/mock/AuctionMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AuctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "AuctionNotExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "BidExists",
    type: "error",
  },
  {
    inputs: [],
    name: "BidTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "CommitmentDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionDeadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionHighestBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "auctionHighestBidder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
    ],
    name: "commit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuctionDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
    ],
    name: "hasAuctionExpired",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
    ],
    name: "hasCommitment",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "secret",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "makeCommitment",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "label",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "secret",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "reveal",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b2938038062001b29833981810160405281019062000037919062000149565b806200005467151a369d6337885e60c01b620000c160201b60201c565b6200007067481a372b1f446afd60c01b620000c160201b60201c565b6200008c67a9758281f089ed6460c01b620000c160201b60201c565b6200009d81620000c460201b60201c565b50620000ba67f479ffa0a9ee7d9260c01b6200010660201b60201c565b506200017b565b50565b620000e067ccf254689b8b9f2160c01b620000c160201b60201c565b620000fc67a4c1b7d03a2cbaaa60c01b620000c160201b60201c565b8060018190555050565b50565b600080fd5b6000819050919050565b62000123816200010e565b81146200012f57600080fd5b50565b600081519050620001438162000118565b92915050565b60006020828403121562000162576200016162000109565b5b6000620001728482850162000132565b91505092915050565b61199e806200018b6000396000f3fe6080604052600436106100915760003560e01c80637a5a69e3116100595780637a5a69e3146101b5578063acc532fd146101f2578063e3ce094d1461022f578063ee060ded1461024b578063fb456c5e1461028a57610091565b8063369e67d61461009657806342c80f05146100d357806348eda45d1461011057806369dcfe8b1461014d57806378cb51af1461018a575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190611558565b6102c7565b6040516100ca91906115ce565b60405180910390f35b3480156100df57600080fd5b506100fa60048036038101906100f591906115e9565b61033c565b6040516101079190611631565b60405180910390f35b34801561011c57600080fd5b50610137600480360381019061013291906115e9565b61039a565b6040516101449190611631565b60405180910390f35b34801561015957600080fd5b50610174600480360381019061016f91906115e9565b610433565b604051610181919061165b565b60405180910390f35b34801561019657600080fd5b5061019f610647565b6040516101ac9190611685565b60405180910390f35b3480156101c157600080fd5b506101dc60048036038101906101d791906115e9565b61068d565b6040516101e99190611631565b60405180910390f35b3480156101fe57600080fd5b50610219600480360381019061021491906115e9565b610739565b6040516102269190611685565b60405180910390f35b610249600480360381019061024491906116a0565b61092d565b005b34801561025757600080fd5b50610272600480360381019061026d91906116e0565b610977565b60405161028193929190611733565b60405180910390f35b34801561029657600080fd5b506102b160048036038101906102ac91906115e9565b6109d2565b6040516102be9190611685565b60405180910390f35b60006102dd6720c21efdbe4d391260c01b610a2e565b6102f1675dd1b0e6a85d03d460c01b610a2e565b61030567b7bd047be06a9e5c60c01b610a2e565b8484848460405160200161031c94939291906117f4565b604051602081830303815290604052805190602001209050949350505050565b60006103526762e6ee8f55cc0fbd60c01b610a2e565b61036667984f03cdf50fe06e60c01b610a2e565b61037a675ce8ab4b72748c3260c01b610a2e565b426002600084815260200190815260200160002060020154109050919050565b60006103b0674cfd07d4bdc98a5360c01b610a2e565b6103c467da02fe005a3dc44460c01b610a2e565b6103d86725fa84122ab618c760c01b610a2e565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205414159050919050565b600061044967f86afa1740ed33c060c01b610a2e565b8161045e678a153e788a3d6d6160c01b610a2e565b6104726715417a6a1ee0cc5660c01b610a2e565b61048667d5305204d2a6f9cf60c01b610a2e565b61048f8161068d565b6104ed576104a767f9326361c6d3c0a960c01b610a2e565b6104bb67e886a3ab1c8058aa60c01b610a2e565b6040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105016787ef80a673b3e25160c01b610a2e565b61051567c19f8c9e7d19b25860c01b610a2e565b610529677df873c66b5b729360c01b610a2e565b6105328161033c565b6105905761054a67fbb2580bc208bc6160c01b610a2e565b61055e67ef94c0c554214ec460c01b610a2e565b6040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105a467aa08abe4f6b74de160c01b610a2e565b6105b8670f0e98f68a45201560c01b610a2e565b6105cc675fbc1fccd1c7ffb760c01b610a2e565b6105e0675598aeabbbcb7ae460c01b610a2e565b6105f467494d203d7cbcb8a560c01b610a2e565b6106086747af70a362df6c7d60c01b610a2e565b6002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600061065d6748ff463c8e6be49c60c01b610a2e565b61067167768185894e46d44160c01b610a2e565b610685677990d6ce7208166760c01b610a2e565b600154905090565b60006106a3678bfea4cdc147623c60c01b610a2e565b6106b76724c92036a314e10860c01b610a2e565b6106cb6794b94ec1d364e36b60c01b610a2e565b600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600061074f67556b0d6a0f34cec660c01b610a2e565b81610764678a153e788a3d6d6160c01b610a2e565b6107786715417a6a1ee0cc5660c01b610a2e565b61078c67d5305204d2a6f9cf60c01b610a2e565b6107958161068d565b6107f3576107ad67f9326361c6d3c0a960c01b610a2e565b6107c167e886a3ab1c8058aa60c01b610a2e565b6040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108076787ef80a673b3e25160c01b610a2e565b61081b67c19f8c9e7d19b25860c01b610a2e565b61082f677df873c66b5b729360c01b610a2e565b6108388161033c565b6108965761085067fbb2580bc208bc6160c01b610a2e565b61086467ef94c0c554214ec460c01b610a2e565b6040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108aa67aa08abe4f6b74de160c01b610a2e565b6108be670f0e98f68a45201560c01b610a2e565b6108d2679704b387a864787860c01b610a2e565b6108e6677b88126cb1fdc1bb60c01b610a2e565b6108fa679394bda985ac8fae60c01b610a2e565b61090e67aecde75e46476f0260c01b610a2e565b6002600084815260200190815260200160002060010154915050919050565b6109416778de37772cadc01b60c01b610a31565b61095567fe1bc40bb1eac3aa60c01b610a31565b6109696761b8ba4ec504522d60c01b610a31565b6109738282610a34565b5050565b6000806000610990677c4d0847fbd590b060c01b610a31565b6109a467cde80e8e1e08fc5760c01b610a31565b6109b867187e9731bb193f4f60c01b610a31565b6109c3868686610e69565b92509250925093509350939050565b60006109e867d91309bf6ff5856a60c01b610a2e565b6109fc675dc4901f926f73d760c01b610a2e565b610a106779b2c44952c8a9bf60c01b610a2e565b60026000838152602001908152602001600020600201549050919050565b50565b50565b610a4867c898fa74e0f77d2660c01b610a2e565b610a5c67d26b723f8f72b8c360c01b610a2e565b610a7067b0d608ecf67f895c60c01b610a2e565b610a798161039a565b15610ad857610a9267faf898b5fb9f233460c01b610a2e565b610aa6673a0c4a87fecf963560c01b610a2e565b6040517f3e0827ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aec672bd3254976dae93260c01b610a2e565b610b0067502a1be2113b979860c01b610a2e565b610b1467abba8d76b9c900a560c01b610a2e565b610b1d8261068d565b610b6b57610b3567f27214e4a690dc3760c01b610a2e565b610b49674c643f751f2ab73f60c01b610a2e565b610b5d67b2a3ab68f0b181ad60c01b610a2e565b610b668261139c565b610b80565b610b7f6706986bfe9a22980160c01b610a2e565b5b610b94671698a272f036882a60c01b610a2e565b610ba867c10cc7502f6ff78960c01b610a2e565b610bb18261033c565b15610c1057610bca67140cd04f84fa9ee260c01b610a2e565b610bde67fe18242c64945aaa60c01b610a2e565b6040517f04a5e67c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c24673c9c11fc393f04d060c01b610a2e565b610c38674026e1daa65135b260c01b610a2e565b610c4c67ac224039435d53fc60c01b610a2e565b60003411610cae57610c6867167ae430415d1b9c60c01b610a2e565b610c7c67534a264b587c364a60c01b610a2e565b6040517fa0d26eb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cc267958e8a717acac99a60c01b610a2e565b610cd667bb566f90f7e0a50260c01b610a2e565b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550610d3e67cc801ca06947219860c01b610a2e565b610d5267e61db34e172e76de60c01b610a2e565b6002600083815260200190815260200160002060010154341115610e5057610d8467ad0adb5e279f200060c01b610a2e565b610d986707ef384b7c22c6b060c01b610a2e565b336002600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e0167d2bc92c8b37d4da860c01b610a2e565b346002600084815260200190815260200160002060010181905550610e3067eda1e4b4f87c4fba60c01b610a2e565b806002600084815260200190815260200160002060030181905550610e65565b610e646727d7a5009a5b578060c01b610a2e565b5b5050565b6000806000610e8267217bfbece521340a60c01b610a2e565b610e96670e19f748a78ec90b60c01b610a2e565b610eaa671a47dcfeeb3e0fcd60c01b610a2e565b6000610eb8338888886102c7565b9050610ece677cc72df97ee8c02760c01b610a2e565b610ee2672028666160a8e15660c01b610a2e565b610eeb8761068d565b610f4957610f0367ce31f210b2b073c460c01b610a2e565b610f17677b53ee604583044960c01b610a2e565b6040517fe6759c6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f5d6777b15dd3eda0981560c01b610a2e565b610f7167c1e8ef3d4f5bbb5960c01b610a2e565b610f8567f69773df0202c39d60c01b610a2e565b610f8e8761033c565b610fec57610fa6675eb2567c35147bc860c01b610a2e565b610fba67350d71ce63fe72b160c01b610a2e565b6040517f9eafe1b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110006715ff0248a17d606060c01b610a2e565b61101467888d747a983a14fb60c01b610a2e565b611028678879f3b20fffeb6560c01b610a2e565b6110318161039a565b61108f57611049679930a00304a2017260c01b610a2e565b61105d67ed0bde6a519c817060c01b610a2e565b6040517f99d1f42800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110a367e1e1978c699efb0860c01b610a2e565b6110b767a7f360f11c28552f60c01b610a2e565b6110cb676a6295a6751e02d560c01b610a2e565b60006110e1679d560aa44d748bab60c01b610a2e565b6110f56770286c23e28b90fb60c01b610a2e565b81600260008a815260200190815260200160002060030154146112b657611126677ae1344eeaff529e60c01b610a2e565b61113a6784b7ba4f678ad19260c01b610a2e565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000205490506111a067c928643844970b6a60c01b610a2e565b6111b467db9df4668f28dbb060c01b610a2e565b60003373ffffffffffffffffffffffffffffffffffffffff16826040516111da90611873565b60006040518083038185875af1925050503d8060008114611217576040519150601f19603f3d011682016040523d82523d6000602084013e61121c565b606091505b5050905061123467566685b5af11bac360c01b610a2e565b61124867daba56d51aea9ae060c01b610a2e565b61125c67ad5096049c9f358e60c01b610a2e565b8061129c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611293906118e5565b60405180910390fd5b6112b06757f4c8a4f11090d260c01b610a2e565b506112cb565b6112ca67533f21d86725dd5c60c01b610a2e565b5b6112df6740d0f383e83f965f60c01b610a2e565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905561134667aa4f17d70aba54aa60c01b610a2e565b61135a6756352dde4e76f69960c01b610a2e565b81600260008a8152602001908152602001600020600301541481600260008b815260200190815260200160002060030154945094509450505093509350939050565b6113b067e0c61af61fd1460660c01b610a2e565b6113c467e9cc2a7b0cadd6fb60c01b610a2e565b600060026000838152602001908152602001600020600101819055506113f467d6ef33e6817f9aad60c01b610a2e565b60006002600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061145e67a3d726359b19881b60c01b610a2e565b6001544261146c9190611934565b600260008381526020019081526020016000206002018190555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114b98261148e565b9050919050565b6114c9816114ae565b81146114d457600080fd5b50565b6000813590506114e6816114c0565b92915050565b6000819050919050565b6114ff816114ec565b811461150a57600080fd5b50565b60008135905061151c816114f6565b92915050565b6000819050919050565b61153581611522565b811461154057600080fd5b50565b6000813590506115528161152c565b92915050565b6000806000806080858703121561157257611571611489565b5b6000611580878288016114d7565b94505060206115918782880161150d565b93505060406115a28782880161150d565b92505060606115b387828801611543565b91505092959194509250565b6115c8816114ec565b82525050565b60006020820190506115e360008301846115bf565b92915050565b6000602082840312156115ff576115fe611489565b5b600061160d8482850161150d565b91505092915050565b60008115159050919050565b61162b81611616565b82525050565b60006020820190506116466000830184611622565b92915050565b611655816114ae565b82525050565b6000602082019050611670600083018461164c565b92915050565b61167f81611522565b82525050565b600060208201905061169a6000830184611676565b92915050565b600080604083850312156116b7576116b6611489565b5b60006116c58582860161150d565b92505060206116d68582860161150d565b9150509250929050565b6000806000606084860312156116f9576116f8611489565b5b60006117078682870161150d565b93505060206117188682870161150d565b925050604061172986828701611543565b9150509250925092565b60006060820190506117486000830186611622565b6117556020830185611676565b61176260408301846115bf565b949350505050565b60008160601b9050919050565b60006117828261176a565b9050919050565b600061179482611777565b9050919050565b6117ac6117a7826114ae565b611789565b82525050565b6000819050919050565b6117cd6117c8826114ec565b6117b2565b82525050565b6000819050919050565b6117ee6117e982611522565b6117d3565b82525050565b6000611800828761179b565b60148201915061181082866117bc565b60208201915061182082856117bc565b60208201915061183082846117dd565b60208201915081905095945050505050565b600081905092915050565b50565b600061185d600083611842565b91506118688261184d565b600082019050919050565b600061187e82611850565b9150819050919050565b600082825260208201905092915050565b7f526566756e64206661696c656400000000000000000000000000000000000000600082015250565b60006118cf600d83611888565b91506118da82611899565b602082019050919050565b600060208201905081810360008301526118fe816118c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061193f82611522565b915061194a83611522565b925082820190508082111561196257611961611905565b5b9291505056fea2646970667358221220d05098bc0ebae6707ae95cfbee829c83757b7c1abe7122c72ec8243e6de9aa1464736f6c63430008130033";

type AuctionMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuctionMock__factory extends ContractFactory {
  constructor(...args: AuctionMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    duration: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(duration, overrides || {});
  }
  override deploy(
    duration: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(duration, overrides || {}) as Promise<
      AuctionMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AuctionMock__factory {
    return super.connect(runner) as AuctionMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionMockInterface {
    return new Interface(_abi) as AuctionMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AuctionMock {
    return new Contract(address, _abi, runner) as unknown as AuctionMock;
  }
}
