/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DNSRegistry,
  DNSRegistryInterface,
} from "../../../contracts/registry/DNSRegistry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "domainPlainText",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "NewDomainOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "addr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "available",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "domains",
        type: "bytes32[]",
      },
    ],
    name: "bulkResolve",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "makeSubdomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
    ],
    name: "resolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_resolver",
        type: "address",
      },
    ],
    name: "setResolver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "parentDomain",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "domain",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setSubDomain",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000808060001b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d9a806100776000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80633b3b57de1161005b5780633b3b57de146100fe5780636932854f1461012e578063c91381e51461015e578063f9e542341461018e5761007d565b80630178b8bf146100825780630ed97309146100b25780631896f70a146100e2575b600080fd5b61009c6004803603810190610097919061061c565b6101be565b6040516100a9919061068a565b60405180910390f35b6100cc60048036038101906100c791906106a5565b6101fd565b6040516100d991906106f4565b60405180910390f35b6100fc60048036038101906100f7919061073b565b610230565b005b6101186004803603810190610113919061061c565b6102f7565b604051610125919061068a565b60405180910390f35b6101486004803603810190610143919061061c565b610336565b6040516101559190610796565b60405180910390f35b610178600480360381019061017391906108f7565b6103a3565b60405161018591906106f4565b60405180910390f35b6101a860048036038101906101a39190610a2e565b6104e9565b6040516101b59190610b35565b60405180910390f35b600080600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008282604051602001610212929190610b78565b60405160208183030381529060405280519060200120905092915050565b813373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461029e57600080fd5b8160008085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1660008084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000833373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461041357600080fd5b6000846040516020016104269190610c15565b604051602081830303815290604052805190602001209050600061044a87836101fd565b90508460008083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550867ffe3504a1644f9523da19bb06fcbeffd519608ccc63bf4898bb1d6a1c8f04b4b68388886040516104d493929190610c76565b60405180910390a28093505050509392505050565b60606000825167ffffffffffffffff811115610508576105076107cc565b5b6040519080825280602002602001820160405280156105365781602001602082028036833780820191505090505b50905060005b83518110156105c85761056884828151811061055b5761055a610cb4565b5b60200260200101516102f7565b82828151811061057b5761057a610cb4565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806105c090610d1c565b91505061053c565b5080915050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6105f9816105e6565b811461060457600080fd5b50565b600081359050610616816105f0565b92915050565b600060208284031215610632576106316105dc565b5b600061064084828501610607565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061067482610649565b9050919050565b61068481610669565b82525050565b600060208201905061069f600083018461067b565b92915050565b600080604083850312156106bc576106bb6105dc565b5b60006106ca85828601610607565b92505060206106db85828601610607565b9150509250929050565b6106ee816105e6565b82525050565b600060208201905061070960008301846106e5565b92915050565b61071881610669565b811461072357600080fd5b50565b6000813590506107358161070f565b92915050565b60008060408385031215610752576107516105dc565b5b600061076085828601610607565b925050602061077185828601610726565b9150509250929050565b60008115159050919050565b6107908161077b565b82525050565b60006020820190506107ab6000830184610787565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610804826107bb565b810181811067ffffffffffffffff82111715610823576108226107cc565b5b80604052505050565b60006108366105d2565b905061084282826107fb565b919050565b600067ffffffffffffffff821115610862576108616107cc565b5b61086b826107bb565b9050602081019050919050565b82818337600083830152505050565b600061089a61089584610847565b61082c565b9050828152602081018484840111156108b6576108b56107b6565b5b6108c1848285610878565b509392505050565b600082601f8301126108de576108dd6107b1565b5b81356108ee848260208601610887565b91505092915050565b6000806000606084860312156109105761090f6105dc565b5b600061091e86828701610607565b935050602084013567ffffffffffffffff81111561093f5761093e6105e1565b5b61094b868287016108c9565b925050604061095c86828701610726565b9150509250925092565b600067ffffffffffffffff821115610981576109806107cc565b5b602082029050602081019050919050565b600080fd5b60006109aa6109a584610966565b61082c565b905080838252602082019050602084028301858111156109cd576109cc610992565b5b835b818110156109f657806109e28882610607565b8452602084019350506020810190506109cf565b5050509392505050565b600082601f830112610a1557610a146107b1565b5b8135610a25848260208601610997565b91505092915050565b600060208284031215610a4457610a436105dc565b5b600082013567ffffffffffffffff811115610a6257610a616105e1565b5b610a6e84828501610a00565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610aac81610669565b82525050565b6000610abe8383610aa3565b60208301905092915050565b6000602082019050919050565b6000610ae282610a77565b610aec8185610a82565b9350610af783610a93565b8060005b83811015610b28578151610b0f8882610ab2565b9750610b1a83610aca565b925050600181019050610afb565b5085935050505092915050565b60006020820190508181036000830152610b4f8184610ad7565b905092915050565b6000819050919050565b610b72610b6d826105e6565b610b57565b82525050565b6000610b848285610b61565b602082019150610b948284610b61565b6020820191508190509392505050565b600081519050919050565b600081905092915050565b60005b83811015610bd8578082015181840152602081019050610bbd565b60008484015250505050565b6000610bef82610ba4565b610bf98185610baf565b9350610c09818560208601610bba565b80840191505092915050565b6000610c218284610be4565b915081905092915050565b600082825260208201905092915050565b6000610c4882610ba4565b610c528185610c2c565b9350610c62818560208601610bba565b610c6b816107bb565b840191505092915050565b6000606082019050610c8b60008301866106e5565b8181036020830152610c9d8185610c3d565b9050610cac604083018461067b565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610d2782610d12565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d5957610d58610ce3565b5b60018201905091905056fea264697066735822122017268eccd84a44a978c8db370d6b2a170b1aa4a043f58198c59bfcf9ca0f888464736f6c63430008130033";

type DNSRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DNSRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DNSRegistry__factory extends ContractFactory {
  constructor(...args: DNSRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DNSRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DNSRegistry__factory {
    return super.connect(runner) as DNSRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DNSRegistryInterface {
    return new Interface(_abi) as DNSRegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DNSRegistry {
    return new Contract(address, _abi, runner) as unknown as DNSRegistry;
  }
}
